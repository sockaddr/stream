# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_volume_key', [dirname(__file__)])
        except ImportError:
            import _volume_key
            return _volume_key
        if fp is not None:
            try:
                _mod = imp.load_module('_volume_key', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _volume_key = swig_import_helper()
    del swig_import_helper
else:
    import _volume_key
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SECRET_DEFAULT = _volume_key.SECRET_DEFAULT
SECRET_DATA_ENCRYPTION_KEY = _volume_key.SECRET_DATA_ENCRYPTION_KEY
SECRET_PASSPHRASE = _volume_key.SECRET_PASSPHRASE
VP_IDENTIFICATION = _volume_key.VP_IDENTIFICATION
VP_CONFIGURATION = _volume_key.VP_CONFIGURATION
VP_SECRET = _volume_key.VP_SECRET
VOLUME_FORMAT_LUKS = _volume_key.VOLUME_FORMAT_LUKS
PACKET_FORMAT_UNKNOWN = _volume_key.PACKET_FORMAT_UNKNOWN
PACKET_FORMAT_CLEARTEXT = _volume_key.PACKET_FORMAT_CLEARTEXT
PACKET_FORMAT_ASYMMETRIC = _volume_key.PACKET_FORMAT_ASYMMETRIC
PACKET_FORMAT_ASSYMETRIC = _volume_key.PACKET_FORMAT_ASSYMETRIC
PACKET_FORMAT_PASSPHRASE = _volume_key.PACKET_FORMAT_PASSPHRASE
PACKET_FORMAT_ASYMMETRIC_WRAP_SECRET_ONLY = _volume_key.PACKET_FORMAT_ASYMMETRIC_WRAP_SECRET_ONLY
PACKET_FORMAT_SYMMETRIC_WRAP_SECRET_ONLY = _volume_key.PACKET_FORMAT_SYMMETRIC_WRAP_SECRET_ONLY
PACKET_MATCH_OK = _volume_key.PACKET_MATCH_OK
PACKET_MATCH_UNSURE = _volume_key.PACKET_MATCH_UNSURE
class UI(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UI, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UI, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _volume_key.new_UI()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _volume_key.delete_UI
    __del__ = lambda self : None;
    __swig_setmethods__["generic_cb"] = _volume_key.UI_generic_cb_set
    __swig_getmethods__["generic_cb"] = _volume_key.UI_generic_cb_get
    if _newclass:generic_cb = _swig_property(_volume_key.UI_generic_cb_get, _volume_key.UI_generic_cb_set)
    __swig_setmethods__["passphrase_cb"] = _volume_key.UI_passphrase_cb_set
    __swig_getmethods__["passphrase_cb"] = _volume_key.UI_passphrase_cb_get
    if _newclass:passphrase_cb = _swig_property(_volume_key.UI_passphrase_cb_get, _volume_key.UI_passphrase_cb_set)
    def set_nss_pwfn_arg(self, *args): return _volume_key.UI_set_nss_pwfn_arg(self, *args)
UI_swigregister = _volume_key.UI_swigregister
UI_swigregister(UI)

class libvk_volume_property(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, libvk_volume_property, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, libvk_volume_property, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _volume_key.delete_libvk_volume_property
    __del__ = lambda self : None;
    __swig_getmethods__["label"] = _volume_key.libvk_volume_property_label_get
    if _newclass:label = _swig_property(_volume_key.libvk_volume_property_label_get)
    __swig_getmethods__["name"] = _volume_key.libvk_volume_property_name_get
    if _newclass:name = _swig_property(_volume_key.libvk_volume_property_name_get)
    __swig_getmethods__["type"] = _volume_key.libvk_volume_property_type_get
    if _newclass:type = _swig_property(_volume_key.libvk_volume_property_type_get)
    __swig_getmethods__["value"] = _volume_key.libvk_volume_property_value_get
    if _newclass:value = _swig_property(_volume_key.libvk_volume_property_value_get)
libvk_volume_property_swigregister = _volume_key.libvk_volume_property_swigregister
libvk_volume_property_swigregister(libvk_volume_property)

class Volume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Volume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Volume, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _volume_key.delete_Volume
    __del__ = lambda self : None;
    __swig_getmethods__["open"] = lambda x: _volume_key.Volume_open
    if _newclass:open = staticmethod(_volume_key.Volume_open)
    __swig_getmethods__["hostname"] = _volume_key.Volume_hostname_get
    if _newclass:hostname = _swig_property(_volume_key.Volume_hostname_get)
    __swig_getmethods__["uuid"] = _volume_key.Volume_uuid_get
    if _newclass:uuid = _swig_property(_volume_key.Volume_uuid_get)
    __swig_getmethods__["label"] = _volume_key.Volume_label_get
    if _newclass:label = _swig_property(_volume_key.Volume_label_get)
    __swig_getmethods__["path"] = _volume_key.Volume_path_get
    if _newclass:path = _swig_property(_volume_key.Volume_path_get)
    __swig_getmethods__["format"] = _volume_key.Volume_format_get
    if _newclass:format = _swig_property(_volume_key.Volume_format_get)
    def dump_properties(self, *args): return _volume_key.Volume_dump_properties(self, *args)
    def get_secret(self, *args): return _volume_key.Volume_get_secret(self, *args)
    def add_secret(self, *args): return _volume_key.Volume_add_secret(self, *args)
    def load_packet(self, *args): return _volume_key.Volume_load_packet(self, *args)
    def apply_packet(self, *args): return _volume_key.Volume_apply_packet(self, *args)
    def open_with_packet(self, *args): return _volume_key.Volume_open_with_packet(self, *args)
    def create_packet_cleartext(self, *args): return _volume_key.Volume_create_packet_cleartext(self, *args)
    def create_packet_assymetric(self, *args): return _volume_key.Volume_create_packet_assymetric(self, *args)
    def create_packet_asymmetric(self, *args): return _volume_key.Volume_create_packet_asymmetric(self, *args)
    def create_packet_assymetric_from_cert_data(self, *args): return _volume_key.Volume_create_packet_assymetric_from_cert_data(self, *args)
    def create_packet_asymmetric_from_cert_data(self, *args): return _volume_key.Volume_create_packet_asymmetric_from_cert_data(self, *args)
    def create_packet_with_passphrase(self, *args): return _volume_key.Volume_create_packet_with_passphrase(self, *args)
    def packet_match_volume(self, *args): return _volume_key.Volume_packet_match_volume(self, *args)
Volume_swigregister = _volume_key.Volume_swigregister
Volume_swigregister(Volume)

def Volume_open(*args):
  return _volume_key.Volume_open(*args)
Volume_open = _volume_key.Volume_open

class Packet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Packet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Packet, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["get_format"] = lambda x: _volume_key.Packet_get_format
    if _newclass:get_format = staticmethod(_volume_key.Packet_get_format)
    __swig_getmethods__["open"] = lambda x: _volume_key.Packet_open
    if _newclass:open = staticmethod(_volume_key.Packet_open)
Packet_swigregister = _volume_key.Packet_swigregister
Packet_swigregister(Packet)

def Packet_get_format(*args):
  return _volume_key.Packet_get_format(*args)
Packet_get_format = _volume_key.Packet_get_format

def Packet_open(*args):
  return _volume_key.Packet_open(*args)
Packet_open = _volume_key.Packet_open



